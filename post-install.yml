# https://fedoramagazine.org/using-ansible-setup-workstation/
# ansible-playbook -K post-install.yml

- hosts: localhost
  vars:
    - fedora_version: 31
  tasks:

# Packages
    - name: Install Builder
      become: yes
      package:
        name: gnome-builder
        state: present
    - name: Install Ansible DConf Module Dependency
      become: yes
      package:
        name: python3-psutil
        state: present
    - name: Install RPM Fusion Repository
      become: yes
      dnf:
        name: 
          - "http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ fedora_version }}.noarch.rpm"
          - "https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ fedora_version }}.noarch.rpm"
        state: present
    - name: Install Tilix
      become: yes
      package:
        name: tilix
        state: present
    - name: Install VLC
      become: yes
      package:
        name: vlc
        state: present
    - name: Install GNOME Tweaks
      become: yes
      package:
        name: gnome-tweaks
        state: present
    - name: Install Media Codecs
      become: yes
      package:
        name: "{{ packages }}"
      vars:
        packages:
        - gstreamer1-libav 
        - gstreamer1-plugins-bad-free-extras 
        - gstreamer1-plugins-bad-freeworld 
        - gstreamer1-plugins-base-tools 
        - gstreamer1-plugins-good-extras 
        - gstreamer1-plugins-ugly 
        - gstreamer1-plugins-bad-free 
        - gstreamer1-plugins-good 
        - gstreamer1-plugins-base 
        - gstreamer1
        - ffmpeg
        - compat-ffmpeg28 
        - ffmpeg-libs
        - libmatroska
        - chromium-libs-media-freeworld
    - name: Install x86 Compilers (Required for STM32 Programming)
      become: yes
      package:
        name: "{{ packages }}"
      vars:
        packages:
        - glibc-devel 
        - glibc-devel.i686
    - name: Install SeaHorse to encrypt and decrypt files easily
      become: yes
      package:
        name: "{{ packages }}"
      vars:
        packages:
        - seahorse
        - seahorse-nautilus
    - name: Install Other Tools
      become: yes
      package:
        name: "{{ packages }}"
      vars:
        packages:
        - vim
        - htop 
        - nmap
        - aircrack-ng


# DConf Settings
# You can use `dconf watch /` to know what key has been changed
# gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita-dark'
# gsettings set org.gnome.desktop.input-sources xkb-options "['ctrl:nocaps']"
# gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'us+alt-intl')]"
    - name: Enable Dark Theme
      dconf:
        key: /org/gnome/desktop/interface/gtk-theme
        value: "'Adwaita-dark'"
    - name: Enable Caps Lock as Ctrl
      dconf:
        key: /org/gnome/desktop/input-sources/xkb-options
        value: "['ctrl:nocaps']"
    - name: Set Keyboard layout to US Alt. Inter
      dconf:
        key: /org/gnome/desktop/input-sources/sources
        value: "[('xkb', 'us+alt-intl')]"
    - name: Set Locale Region
      dconf:
        key: /system/locale/region
        value: "'en_GB.UTF-8'"
    - name: Show Date on Clock
      dconf:
        key: /org/gnome/desktop/interface/clock-show-date
        value: "true"
    - name: Show Battery Percentage
      dconf:
        key: /org/gnome/desktop/interface/show-battery-percentage
        value: "true"
    - name: Show Weekdate
      dconf:
        key: /org/gnome/desktop/calendar/show-weekdate
        value: "true"
    - name: Change WM Button Layout
      dconf:
        key: /org/gnome/desktop/wm/preferences/button-layout
        value: "'appmenu:minimize,maximize,close'"
    - name: Enable Night Light
      dconf:
        key: /org/gnome/settings-daemon/plugins/color/night-light-enabled
        value: "true"
    - name: Set Night Light Temperature
      dconf:
        key: /org/gnome/settings-daemon/plugins/color/night-light-temperature
        value: "uint32 5500"
    # Removable Media Handler - Always ask what to do
    - name: Removable Media Handler - Don't run software
      dconf:
        key: /org/gnome/desktop/media-handling/autorun-x-content-start-app
        value: "['']"
    - name: Removable Media Handler - Don't open folder 
      dconf:
        key: /org/gnome/desktop/media-handling/autorun-x-content-open-folder
        value: "['']"
    - name: Removable Media Handler - Don't ignore
      dconf:
        key: /org/gnome/desktop/media-handling/autorun-x-content-ignore
        value: "['']"
    # Empty trash and temp files periodcally
    - name: Empty trash - On
      dconf:
        key: /org/gnome/desktop/privacy/remove-old-trash-files
        value: "true"
    - name: Clean temp files - On
      dconf:
        key: /org/gnome/desktop/privacy/remove-old-temp-files
        value: "true"
    - name: Set trash and temp files age (days)
      dconf:
        key: /org/gnome/desktop/privacy/old-files-age
        value: "uint32 30"
    # Privacy settings
    - name: Disable location services
      dconf:
        key: /org/gnome/system/location/enabled
        value: "false"
    # Screen Lock
    - name: Enable screen lock
      dconf:
        key: /org/gnome/desktop/screensaver/lock-enabled
        value: "true"
    - name: Screen lock delay after blank screen (seconds)
      dconf:
        key: /org/gnome/desktop/screensaver/lock-delay
        value: "uint32 0"
    - name: Screen blank screen delay (seconds)
      dconf:
        key: /org/gnome/desktop/session/idle-delay
        value: "uint32 120"
    - name: Remove from search
      dconf:
        key: /org/gnome/desktop/search-providers/disabled
        value: "['org.gnome.Contacts.desktop', 'org.gnome.Calendar.desktop', 'org.gnome.Characters.desktop', 'org.gnome.clocks.desktop', 'org.gnome.Terminal.desktop', 'org.gnome.Software.desktop']"


# Flatpak And GUI Softwares
# flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
# flatpak update
    - name: Add the flathub flatpak repository remote to the user installation
      flatpak_remote:
        name: flathub
        flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
        state: present
    - name: Install Transmission
      flatpak:
        name: com.transmissionbt.Transmission
        remote: flathub
        state: present
    - name: Install Spotify
      flatpak:
        name: com.spotify.Client
        remote: flathub
        state: present
    - name: Install Blender
      flatpak:
        name: org.blender.Blender
        remote: flathub
        state: present

# Install ZSH
# dnf install -y zsh
# sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
# sudo usermod -s /usr/bin/zsh yourlogin
# add to path (zshrc)
# $HOME/.local/bin
    - name: Install ZSH
      become: yes
      package:
        name: zsh
        state: present
    - name: Download Oh-My-Zsh
      get_url:
        url: https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh
        dest: ~/
        mode: 0740
    - name: Install Oh-My-Zsh
      command: sh -c "~/install.sh"
      register: omzsh_install
      changed_when: omzsh_install.rc == 0
      failed_when: 
        - omzsh_install.rc != 0
        - omzsh_install.rc != 1
    - name: Change Zsh Theme
      lineinfile: 
        dest: ~/.zshrc 
        regexp: "^ZSH_THEME=(.*)" 
        line: 'ZSH_THEME="gianu"' 
        state: present 
        backup: yes 
        backrefs: yes
    - name: Add Open Alias to Zsh config
      lineinfile: 
        dest: ~/.zshrc 
        line: 'alias open="xdg-open"' 
        state: present 
        backup: yes 
    - name: Add dnf cache Alias to Zsh config
      lineinfile: 
        dest: ~/.zshrc 
        line: 'alias dnf="dnf --cacheonly --color=auto"' 
        state: present 
        backup: yes 
    - name: Set PATH on Zsh config
      lineinfile: 
        dest: ~/.zshrc 
        regexp: "export PATH=(.*)" 
        line: 'export PATH=$HOME/.local/bin:$PATH' 
        state: present 
        backup: yes 
        backrefs: yes
    - name: Change user's shell
      become: yes
      command: usermod --shell /usr/bin/zsh {{ ansible_user_id }}
      register: userm
      changed_when: '"no changes" in userm.stdout'


# Setup MAC Randomization 
    - name: Configure MAC randomization
      become: yes
      copy:
        src: ./files/10-mac-randomization.conf
        dest: /etc/NetworkManager/conf.d/11-mac-randomization.conf
        backup: yes
